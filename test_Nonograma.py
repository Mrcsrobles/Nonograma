from unittest import TestCase
from Nonograma import Iniciar


class Test(TestCase):

    def test_faciles(self):
        self.assertEqual(Iniciar("1 1", "0", "0"), [['-']])
        self.assertEqual(Iniciar("1 2", "1", "0 1"), [['-#']])
        self.assertEqual(Iniciar("1 2", "1", "1 0"), [['#-']])
        self.assertEqual(Iniciar("2 1", "0 0", "0"), [['-'], ['-']])
        self.assertEqual(Iniciar("2 1", "0 1", "1"), [['-'], ['#']])
        self.assertEqual(Iniciar("2 1", "1 0", "1"), [['#'], ['-']])
        self.assertEqual(Iniciar("1 2", "2", "1 1"), [['##']])
        self.assertEqual(Iniciar("1 1", "1", "1"), [['#']])
        self.assertEqual(Iniciar("2 1", "1 1", "2"), [['#'], ['#']])
        self.assertEqual(Iniciar("1 2", "0", "0 0"), [['--']])
        self.assertEqual(Iniciar("5 5", "4 3 4 1 1", "3 3 3 3 1"),
                         [['-####'], ['-###-'], ['####-'], ['#----'], ['#----']])

    def test_faciles2(self):

        self.assertEqual(Iniciar("7 7", "0 1 3 5 3 1 0", "0 1 3 5 3 1 0"),
                         [['-------'], ['---#---'], ['--###--'], ['-#####-'], ['--###--'], ['---#---'], ['-------']])
        self.assertEqual(Iniciar("5 5", "5 5 5 5 5", "5 5 5 5 5"),
                         [['#####'], ['#####'], ['#####'], ['#####'], ['#####']])
        self.assertEqual(Iniciar("5 6", "6 6 6 6 6", "5 5 5 5 5 5"),
                         [['######'], ['######'], ['######'], ['######'], ['######']])
        self.assertEqual(Iniciar("20 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "20"),
                         [['#'], ['#'], ['#'], ['#'], ['#'], ['#'], ['#'], ['#'], ['#'], ['#'], ['#'], ['#'], ['#'],
                          ['#'], ['#'], ['#'], ['#'], ['#'], ['#'], ['#']])
        self.assertEqual(Iniciar("5 6", "0 2 2 1 0", "0 0 2 3 0 0"),
                         [['------'], ['--##--'], ['--##--'], ['---#--'], ['------']])
        self.assertEqual(Iniciar("10 5", "1 2 2 2 2 2 1 1 2 1", "1 8 5 1 1"),
                         [['---#-'],
                          ['-##--'],
                          ['-##--'],
                          ['-##--'],
                          ['-##--'],
                          ['-##--'],
                          ['-#---'],
                          ['-#---'],
                          ['##---'],
                          ['----#']])
        self.assertEqual(Iniciar("1 20", "1", "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1"), [['-------------------#']])
        self.assertEqual(Iniciar("1 1", "1", "1"), [['#']])
        self.assertEqual(Iniciar("5 5", "1 2 3 4 5", "1 2 3 4 5"),
                         [['----#'], ['---##'], ['--###'], ['-####'], ['#####']])

    def test_imposibles(self):
        self.assertEqual(Iniciar("1 2", "1", "1 1"), "IMPOSIBLE")

        self.assertEqual(Iniciar("2 1", "0 1", "0"), "IMPOSIBLE")
        self.assertEqual(Iniciar("2 1", "1 0", "0"), "IMPOSIBLE")
        self.assertEqual(Iniciar("2 1", "1 1", "0"), "IMPOSIBLE")
        self.assertEqual(Iniciar("2 1", "0 0", "1"), "IMPOSIBLE")
        self.assertEqual(Iniciar("1 1", "0", "1"), "IMPOSIBLE")
        self.assertEqual(Iniciar("2 1", "1 1", "1"), "IMPOSIBLE")
        self.assertEqual(Iniciar("1 2", "0", "0 2"), "IMPOSIBLE")
        self.assertEqual(Iniciar("1 2", "0", "1 2"), "IMPOSIBLE")
        self.assertEqual(Iniciar("1 2", "1", "0 2"), "IMPOSIBLE")

    def test_imposibles2(self):
        self.assertEqual(Iniciar("1 2", "1", "1 2"), "IMPOSIBLE")
        self.assertEqual(Iniciar("1 2", "0", "2 0"), "IMPOSIBLE")
        self.assertEqual(Iniciar("1 2", "0", "2 1"), "IMPOSIBLE")
        self.assertEqual(Iniciar("1 2", "1", "2 0"), "IMPOSIBLE")
        self.assertEqual(Iniciar("1 2", "1", "2 1"), "IMPOSIBLE")
        self.assertEqual(Iniciar("1 2", "2", "0 0"), "IMPOSIBLE")
        self.assertEqual(Iniciar("1 1", "1", "0"), "IMPOSIBLE")
        self.assertEqual(Iniciar("1 2", "2", "0 1"), "IMPOSIBLE")
        self.assertEqual(Iniciar("1 2", "2", "1 0"), "IMPOSIBLE")
        self.assertEqual(Iniciar("1 2", "0", "0 1"), "IMPOSIBLE")

    def test_imposibles3(self):
        self.assertEqual(Iniciar("2 1", "0 2", "0"), "IMPOSIBLE")
        self.assertEqual(Iniciar("2 1", "0 2", "1"), "IMPOSIBLE")
        self.assertEqual(Iniciar("2 1", "1 2", "0"), "IMPOSIBLE")
        self.assertEqual(Iniciar("2 1", "1 2", "1"), "IMPOSIBLE")
        self.assertEqual(Iniciar("2 1", "2 0", "0"), "IMPOSIBLE")
        self.assertEqual(Iniciar("2 1", "2 1", "0"), "IMPOSIBLE")
        self.assertEqual(Iniciar("2 1", "2 0", "1"), "IMPOSIBLE")
        self.assertEqual(Iniciar("1 2", "0", "1 0"), "IMPOSIBLE")

    def test_imposibles4(self):
        self.assertEqual(Iniciar("1 2", "0", "1 1"), "IMPOSIBLE")
        self.assertEqual(
            Iniciar("20 20", "1 1 1 2 2 2 4 4 4 4 4 4 2 2 2 2 1 1 1 1", "6 13 20 6 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0"),
            "IMPOSIBLE")
        self.assertEqual(Iniciar("15 15", "15 14 13 12 11 10 9 8 7 6 5 4 3 2 0", "15 14 13 12 11 10 9 8 7 6 5 4 3 2 0"),
                         "IMPOSIBLE")
        self.assertEqual(Iniciar("20 20", "1 3 5 7 9 11 13 15 17 19 19 17 15 13 11 9 7 5 3 1",
                                 "2 4 6 8 10 12 14 16 18 20 18 16 14 12 10 8 6 4 2"), "IMPOSIBLE")

    def test_imposibles5(self):
        self.assertEqual(Iniciar("3 4", "2 0 3", "0 2 2 1"), "IMPOSIBLE")
        self.assertEqual(Iniciar("5 6", "5 5 5 5 5 5", "6 6 6 6 6"), "IMPOSIBLE")
        self.assertEqual(Iniciar("5 10", "5 5 5 5 5 5 5 5 5 5", "10 10 10 10 10"), "IMPOSIBLE")
        self.assertEqual(Iniciar("5 15", "5 5 5 5 5 5 5 5 5 5 5 5 5 5 5", "15 15 15 15 15"), "IMPOSIBLE")
        self.assertEqual(Iniciar("20 1", "20", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"), "IMPOSIBLE")

        self.assertEqual(Iniciar("2 1", "2 1", "1"), "IMPOSIBLE")
        self.assertEqual(Iniciar("2 1", "0 0", "2"), "IMPOSIBLE")
        self.assertEqual(Iniciar("2 1", "0 1", "2"), "IMPOSIBLE")
        self.assertEqual(Iniciar("2 1", "1 0", "2"), "IMPOSIBLE")
        self.assertEqual(Iniciar("1 2", "1", "0 0"), "IMPOSIBLE")

    def test_largos(self):
        self.assertEqual(Iniciar("20 20 ", "1 2 2 2 1 0 2 6 11 10 10 9 9 10 15 14 5 4 2 1 ",
                                 "1 3 3 7 11 13 13 12 10 9 8 5 3 2 2 2 2 2 4 4 "),
                         [['-------------------#'],
                          ['------------------##'],
                          ['------------------##'],
                          ['------------------##'],
                          ['------------------#-'],
                          ['--------------------'],
                          ['------##------------'],
                          ['----######----------'],
                          ['###########---------'],
                          ['-##########---------'],
                          ['-##########---------'],
                          ['---#########--------'],
                          ['---#########--------'],
                          ['---##########-------'],
                          ['---###############--'],
                          ['----##############--'],
                          ['----#####-----------'],
                          ['----####------------'],
                          ['-----##-------------'],
                          ['-----#--------------']])


    def test_largos91(self):
        self.assertEqual(Iniciar("20 20 ", "4 4 3 4 6 10 11 8 8 7 6 6 6 5 4 2 2 2 2 1 ",
                                 "3 2 10 11 10 10 9 8 6 5 3 4 4 5 2 2 2 2 2 1 "),#todo tarda mazo
                         [['----------------####'],
                          ['---------------####-'],
                          ['-------------###----'],
                          ['-----------####-----'],
                          ['--------######------'],
                          ['----##########------'],
                          ['---###########------'],
                          ['--########----------'],
                          ['--########----------'],
                          ['--#######-----------'],
                          ['--######------------'],
                          ['--######------------'],
                          ['--######------------'],
                          ['--#####-------------'],
                          ['--####--------------'],
                          ['--##----------------'],
                          ['--##----------------'],
                          ['##------------------'],
                          ['##------------------'],
                          ['#-------------------']])


    def test_largos3(self):
        self.assertEqual(Iniciar("20 20 ", "0 0 1 1 1 3 15 9 5 5 3 3 3 3 3 1 1 1 1 0 ",
                                 "0 0 1 1 1 2 2 4 10 17 10 4 2 2 1 1 1 0 0 0 "),
                         [['--------------------'], ['--------------------'], ['---------#----------'],
                          ['---------#----------'], ['---------#----------'], ['--------###---------'],
                          ['--###############---'], ['-----#########------'], ['-------#####--------'],
                          ['-------#####--------'], ['--------###---------'], ['--------###---------'],
                          ['--------###---------'], ['--------###---------'], ['--------###---------'],
                          ['---------#----------'], ['---------#----------'], ['---------#----------'],
                          ['---------#----------'], ['--------------------']])

    def test_largos33(self):
        self.assertEqual(Iniciar("20 20 ", "0 0 0 0 2 2 2 11 13 17 13 11 2 2 2 1 1 1 1 2 ",
                                 "1 1 1 11 11 5 5 5 5 5 5 5 5 5 3 3 1 1 1 4 "),
                         [['--------------------'], ['--------------------'], ['--------------------'],
                          ['--------------------'], ['---##---------------'], ['---##---------------'],
                          ['---##---------------'], ['---###########------'], ['---#############----'],
                          ['#################---'], ['---#############----'], ['---###########------'],
                          ['---##---------------'], ['---##---------------'], ['---##---------------'],
                          ['-----------------#--'], ['-------------------#'], ['-------------------#'],
                          ['-------------------#'], ['------------------##']])

    def test_largos4(self):
        self.assertEqual(Iniciar("5 10", "10 10 10 10 10", "5 5 5 5 5 5 5 5 5 5"),
                         [['##########'], ['##########'], ['##########'], ['##########'], ['##########']])
        self.assertEqual(Iniciar("5 15", "15 15 15 15 15", "5 5 5 5 5 5 5 5 5 5 5 5 5 5 5"),
                         [['###############'], ['###############'], ['###############'], ['###############'],
                          ['###############']])

        self.assertEqual(Iniciar("20 19", "1 3 5 7 9 11 13 15 17 19 19 17 15 13 11 9 7 5 3 1",
                                 "2 4 6 8 10 12 14 16 18 20 18 16 14 12 10 8 6 4 2"),
                         [['---------#---------'], ['--------###--------'], ['-------#####-------'],
                          ['------#######------'], ['-----#########-----'], ['----###########----'],
                          ['---#############---'], ['--###############--'], ['-#################-'],
                          ['###################'], ['###################'], ['-#################-'],
                          ['--###############--'], ['---#############---'], ['----###########----'],
                          ['-----#########-----'], ['------#######------'], ['-------#####-------'],
                          ['--------###--------'], ['---------#---------']])

    def test_largos5(self):
        self.assertEqual(Iniciar("20 4", "1 1 1 2 2 2 4 4 4 4 4 4 2 2 2 2 1 1 1 1", "6 13 20 6"),
                         [['--#-'], ['--#-'], ['--#-'], ['-##-'], ['-##-'], ['-##-'], ['####'], ['####'], ['####'],
                          ['####'], ['####'], ['####'], ['-##-'], ['-##-'], ['-##-'], ['-##-'], ['--#-'], ['--#-'],
                          ['--#-'], ['--#-']])

        self.assertEqual(
            Iniciar("20 20", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "0 0 0 0 0 0 0 0 0 20 0 0 0 0 0 0 0 0 0 0"),
            [['---------#----------'], ['---------#----------'], ['---------#----------'], ['---------#----------'],
             ['---------#----------'], ['---------#----------'], ['---------#----------'], ['---------#----------'],
             ['---------#----------'], ['---------#----------'], ['---------#----------'], ['---------#----------'],
             ['---------#----------'], ['---------#----------'], ['---------#----------'], ['---------#----------'],
             ['---------#----------'], ['---------#----------'], ['---------#----------'], ['---------#----------']])

        self.assertEqual(Iniciar("20 2", "0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0", "9 5"),
                         [['--'], ['#-'], ['#-'], ['#-'], ['#-'], ['#-'], ['#-'], ['#-'], ['#-'], ['#-'], ['-#'],
                          ['-#'], ['-#'], ['-#'], ['-#'], ['--'], ['--'], ['--'], ['--'], ['--']])

    def test_largos6(self):
        self.assertEqual(
            Iniciar("20 20", "1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0", "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1"),
            [['-------------------#'], ['--------------------'], ['--------------------'], ['--------------------'],
             ['--------------------'], ['--------------------'], ['--------------------'], ['--------------------'],
             ['--------------------'], ['--------------------'], ['--------------------'], ['--------------------'],
             ['--------------------'], ['--------------------'], ['--------------------'], ['--------------------'],
             ['--------------------'], ['--------------------'], ['--------------------'], ['--------------------']])
        self.assertEqual(
            Iniciar("20 20", "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1", "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1"),
            [['--------------------'], ['--------------------'], ['--------------------'], ['--------------------'],
             ['--------------------'], ['--------------------'], ['--------------------'], ['--------------------'],
             ['--------------------'], ['--------------------'], ['--------------------'], ['--------------------'],
             ['--------------------'], ['--------------------'], ['--------------------'], ['--------------------'],
             ['--------------------'], ['--------------------'], ['--------------------'], ['-------------------#']])

    def test_largos7(self):
        self.assertEqual(Iniciar("20 20", "17 16 15 14 17 17 17 13 13 12 12 12 11 10 7 6 6 4 1 1",
                                 "1 2 3 20 18 18 18 17 17 15 14 14 14 13 12 9 7 3 3 3"),
                         [['#################---'], ['-################---'], ['--###############---'],
                          ['---##############---'], ['---#################'], ['---#################'],
                          ['---#################'], ['---#############----'], ['---#############----'],
                          ['---############-----'], ['---############-----'], ['---############-----'],
                          ['---###########------'], ['---##########-------'], ['---#######----------'],
                          ['---######-----------'], ['---######-----------'], ['---####-------------'],
                          ['---#----------------'], ['---#----------------']])

        self.assertEqual(Iniciar("10 10", "1 2 3 4 5 6 7 8 9 10", "1 2 3 4 5 6 7 8 9 10"),
                         [['---------#'], ['--------##'], ['-------###'], ['------####'], ['-----#####'],
                          ['----######'], ['---#######'], ['--########'], ['-#########'], ['##########']])
        self.assertEqual(Iniciar("15 15", "15 14 13 12 11 10 9 8 7 6 5 4 3 2 1", "15 14 13 12 11 10 9 8 7 6 5 4 3 2 1"),
                         [['###############'], ['##############-'], ['#############--'], ['############---'],
                          ['###########----'], ['##########-----'], ['#########------'], ['########-------'],
                          ['#######--------'], ['######---------'], ['#####----------'], ['####-----------'],
                          ['###------------'], ['##-------------'], ['#--------------']])

    def test_largos8(self):
        self.assertEqual(Iniciar("15 15", "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15", "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15"),
                         [['--------------#'], ['-------------##'], ['------------###'], ['-----------####'],
                          ['----------#####'], ['---------######'], ['--------#######'], ['-------########'],
                          ['------#########'], ['-----##########'], ['----###########'], ['---############'],
                          ['--#############'], ['-##############'], ['###############']])
        self.assertEqual(
            Iniciar("16 16", "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16", "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16"),
            [['---------------#'], ['--------------##'], ['-------------###'], ['------------####'],
             ['-----------#####'], ['----------######'], ['---------#######'], ['--------########'],
             ['-------#########'], ['------##########'], ['-----###########'], ['----############'],
             ['---#############'], ['--##############'], ['-###############'], ['################']])

"""
    def test_largos9(self):
        self.assertEqual(
            Iniciar("20 20 ", "3 2 2 3 2 4 3 4 3 2 2 1 2 2 2 1 1 1 2 1 ", "2 2 2 3 7 4 3 2 2 0 1 1 3 4 2 1 1 1 1 1 "),
            [['----------###-------'], ['------------##------'], ['------------##------'], ['-------------###----'],
             ['-------------##-----'], ['----------------####'], ['------###-----------'], ['-----####-----------'],
             ['----###-------------'], ['----##--------------'], ['----##--------------'], ['----#---------------'],
             ['---##---------------'], ['---##---------------'], ['---##---------------'], ['#-------------------'],
             ['#-------------------'], ['-#------------------'], ['-##-----------------'], ['--#-----------------']])

    def test_largos92(self):
        self.assertEqual(
            Iniciar("20 20 ", "1 3 5 4 1 2 3 5 6 7 7 7 4 3 3 3 1 1 0 1 ", "1 1 2 3 4 3 2 3 2 1 0 8 7 8 6 5 5 5 3 1 "),
            [['----#---------------'],
             ['---###--------------'],
             ['--#####-------------'],
             ['#######-------------'],
             ['-------#------------'],
             ['-------##-----------'],
             ['-------###----------'],
             ['--------------#####-'],
             ['-------------######-'],
             ['------------#######-'],
             ['-----------#######--'],
             ['-----------#######--'],
             ['-----------####-----'],
             ['-----------###------'],
             ['-----------###------'],
             ['-----------###------'],
             ['-----------#--------'],
             ['-----------#--------'],
             ['--------------------'],
             ['-------------------#']])
"""